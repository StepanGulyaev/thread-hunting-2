---
title: "Лабораторная работа №1"
author: "Гуляев Степан БИСО-01-20"
format: 
  md:
    output-file: README.md
editor: visual
---

## Цель работы

1.  Развить практические навыки использования языка программирования R для обработки данных

2.  Развить навыки работы в Rstudio IDE:

-   Установка пакетов

-   Работа с проектами в Rstudio

-   Настройка и работа с Git

3.  Закрепить знания базовых типов данных языка R и простейших операций с ними

## Задание

Используя программный пакет swirl, освоить базовые операции в языке программирования R.

## Исходные данные

1.  ОС Windows 10
2.  Интерпретатор R v-4.3.1
3.  RStudio Desktop

## Ход работы

### Установка swirl

Введем команды:

-   install.packages("swirl")
-   swirl::swirl()

И будем следовать инструкциям базового курса

### Базовые структурные блоки

#### Шаг 1

In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and press Enter.

```{r}
5 + 7
```

#### Шаг 2

To assign the result of 5 + 7 to a new variable called x, you type x \<- 5 + 7. This can be read as 'x gets 5 plus 7'. Give it a try now.

```{r}
x <- 5 + 7
```

#### Шаг 3

To view the contents of the variable x, just type x and press Enter. Try it now.

```{r}
x
```

#### Шаг 4

Now, store the result of x - 3 in a new variable called y.

```{r}
y <- x - 3
```

#### Шаг 5

What is the value of y? Type y to find out.

```{r}
y
```

#### Шаг 6

Now, let's create a small collection of numbers called a vector. Any object that contains data is called a data structure and numeric vectors are the simplest type of data structure in R. In fact, even a single number is considered a vector of length one.

The easiest way to create a vector is with the c() function, which stands for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z.

```{r}
z <- c(1.1,9,3.14)
```

#### Шаг 7

Anytime you have questions about a particular function, you can access R's built-in help files via the `?` command. For example, if you want more information on the c() function, type ?c without the parentheses that normally follow a function name. Give it a try.

```{r}
?c
```

#### Шаг 8

Type z to view its contents. Notice that there are no commas separating the values in the output.

```{r}
z
```

#### Шаг 9

You can combine vectors to make a new vector. Create a new vector that contains z, 555, then z again in that order. Don't assign this vector to a new variable, so that we can just see the result immediately.

```{r}
c(z,555,z)
```

#### Шаг 10

Numeric vectors can be used in arithmetic expressions. Type the following to see what happens: z \* 2 + 100.

```{r}
z * 2 + 100
```

#### Шаг 11

Take the square root of z - 1 and assign it to a new variable called my_sqrt.

```{r}
my_sqrt <- sqrt(z-1)
```

#### Шаг 12

Print the contents of my_sqrt.

```{r}
my_sqrt
```

#### Шаг 13

Now, create a new variable called my_div that gets the value of z divided by my_sqrt.

```{r}
my_div <- z/my_sqrt
```

#### Шаг 14

Go ahead and print the contents of my_div.

```{r}
my_div
```

#### Шаг 15

To see another example of how this vector 'recycling' works, try adding c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.

```{r}
c(1,2,3,4) + c(0,10)
```

#### Шаг 16

Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

```{r}
c(1, 2, 3, 4) + c(0, 10, 100)
```

#### Шаг 17

In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on your keyboard until you get to this command (z \* 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected command.

```{r}
z * 2 + 1000
```

#### Шаг 18

You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)

```{r}
my_div
```

### Рабочие пространства и файлы

#### Шаг 1

Determine which directory your R session is using as its current working directory using getwd().

```{r}
getwd()
```

#### Шаг 2

List all the objects in your local workspace using ls().

```{r}
ls()
```

#### Шаг 3

Assign 9 to x using x <- 9.

```{r}
x <- 9
```

#### Шаг 4

Now take a look at objects that are in your workspace using ls().

```{r}
ls()
```

#### Шаг 5

List all the files in your working directory using list.files() or dir().

```{r}
dir()
```

#### Шаг 6

As we go through this lesson, you should be examining the help page for each new function. Check out the help page for list.files with the command ?list.files.

```{r}
?list.files
```

#### Шаг 7

Use the args() function to determine the arguments to list.files().

```{r}
args(list.files)
```

#### Шаг 8

Use the args() function to determine the arguments to list.files().

```{r}
old.dir <- getwd()
```

#### Шаг 9

Use dir.create() to create a directory in the current working directory called "testdir".

```{r}
dir.create("testdir")
```

#### Шаг 10

Set your working directory to "testdir" with the setwd() command.

```{r}
setwd("testdir")
```

#### Шаг 11

Create a file in your working directory called "mytest.R" using the file.create() function.

```{r}
file.create("mytest.R")
```

#### Шаг 12

This should be the only file in this newly created directory. Let's check this by listing all the files in the current directory.

```{r}
dir()
```

#### Шаг 13

Check to see if "mytest.R" exists in the working directory using the file.exists() function.

```{r}
file.exists("mytest.R")
```

#### Шаг 14

Check to see if "mytest.R" exists in the working directory using the file.exists() function.

```{r}
file.info("mytest.R")
```

#### Шаг 15

Change the name of the file "mytest.R" to "mytest2.R" by using file.rename().

```{r}
file.rename("mytest.R","mytest2.R")
```

#### Шаг 16

Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

```{r}
file.copy("mytest2.R","mytest3.R")
```

#### Шаг 17

Provide the relative path to the file "mytest3.R" by using file.path().

```{r}
file.path("mytest3.R")
```

#### Шаг 18

You can use file.path to construct file and directory paths that are independent of the operating system your R code is running on. Pass 'folder1' and 'folder2' as arguments to file.path to make a platform-independent pathname.

```{r}
file.path('folder1','folder2')
```

#### Шаг 19

You can use file.path to construct file and directory paths that are independent of the operating system your R code is running on. Pass 'folder1' and 'folder2' as arguments to file.path to make a platform-independent pathname.

```{r}
file.path('folder1','folder2')
```






